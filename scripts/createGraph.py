import json
import community
import networkx as nx
import pandas as pd
import randomcolor

import config as CONFIG

"""When calling this function make sure you give it a .json extension for g_export argument"""


def generate_graph(nodes_df, links_df, g_export='graph.json', set_size=None):
    """
    Args:
        nodes_df: dataframe representing the nodes
        links_df: dataframe representing the links
        set_size: num representing a subset amount of the data frames
        g_export: str representing the name of the exported json - placed here to name the graph based on features

    Generate a subset of nodes and edges
    graph = {
        "nodes" : [...],
        "links": [...]
    }

    returns a json file structured as the dict graph
    """

    # drop the unneed cols in the links df
    unneed_cols = ['num_matched_features', 'matched_features', 'num_missed_features', 'missed_features']
    links_df = links_df.drop(columns=unneed_cols)

    # Drop all nans from rows but still retain columns
    nodes_series = nodes_df.apply(lambda x: x.dropna().to_dict(), 1).groupby(nodes_df.index // 2).apply(lambda x: x.to_dict())
    # select how many rows you want to get from the column
    links_dict = links_df[:set_size].to_dict(orient='index').values()

    # convert it to an array of dicts
    nodes_array = [i for i in nodes_series]
    links_array = [i for i in links_dict]

    # setup format for json later
    graph = {
        'nodes': nodes_array,
        'links': links_array
    }

    g = ''

    if set_size != None:
        print(f"Generating subset graph with of size {set_size} ")
        # naming of the graph json file
        graph_file_name = CONFIG.new_data_folder / 'subsetGraph.json'
        g = graph_file_name

    else:
        print("Generating graph json")
        # naming of the graph json file
        graph_file_name = CONFIG.new_data_folder / g_export
        print("Completed! check your DIR")
        g = graph_file_name

    # write the data frame to json
    with open(g, 'w') as file:
        json.dump(graph, file)


def community_graph(links_df, original_df, g_export='graph.json'):
    """ Function to create json file based on communities generated by nx
    Args:
        links_df (pandas data frame): The data frame on which we will create the graph from
        original_df (pandas data frame): data frame of the nodes

    returns:
        A data frame that represents the nodes with a unique group_id and color
    """

    print("Creating a nodes data frame representing the nodes with a unique group ids and colors")

    # clean up column names accordingly
    links_df = links_df.rename(columns={"target": "source", "neighbor": "target"})
    # define graph
    """ change: source='target' and target='neighbor' """
    g = nx.from_pandas_edgelist(links_df, source='source', target='target')
    # compute the best partition
    G = g
    # c = list(greedy_modularity_communities(G))
    partition = community.best_partition(G)
    # merge the groupids onto the df
    partition_items = partition.items()
    df_with_groupids = pd.DataFrame(partition_items, columns=['Code', 'group_id'])
    # get edges only where source and target nodes belong to a valid community for now
    nodes_in_communities = df_with_groupids['Code'].unique()
    edges_for_community_nodes_df = links_df.loc[links_df['source'].isin(nodes_in_communities) & links_df['target'].isin(nodes_in_communities)]
    # merge unique ids onto the original dataframe
    df_merged = pd.merge(original_df, df_with_groupids, how='left', on=['Code'])
    # add a unique color - NaN's will have same color
    unique_community_ids = df_merged['group_id'].unique()

    color_dict = []
    for groupid in unique_community_ids:
        # generate a random color
        color = randomcolor.RandomColor().generate()[0]
        color_dict.append({'group_id': groupid, 'color_code': color})

    # create a dataframe from the color and unique id
    color_df = pd.DataFrame(color_dict)

    # # merge that dataframe with the original
    df_merged_with_color = pd.merge(df_merged, color_df, how='left', on=['group_id'])

    return df_merged_with_color


def run_after_scc(nodes_file, links_file, export_file):
    print("Starting the process to write files to json")
    """Make sure you add the csv extension"""
    nodes_df = pd.read_csv(CONFIG.new_data_folder / nodes_file)
    links_df = pd.read_csv(CONFIG.new_data_folder / links_file)

    # create the graph file from the two csv
    g_export_name = export_file + '.json'

    # creating a dataframe with the a community and color
    nodes_df_with_group_and_color = community_graph(links_df, nodes_df, g_export_name)

    # creating the graph file
    generate_graph(nodes_df_with_group_and_color, links_df, g_export_name)


run_after_scc('major-nd.csv', 'major-neighbors.csv', 'major')

